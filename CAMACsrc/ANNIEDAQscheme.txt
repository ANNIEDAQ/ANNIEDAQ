1. Input Variables

Defines DataModel::RunType = 0 variable


2. Postgress

It has private pqxx::connection pointer, C, open dbname, hostaddr, and port. I think it connects to DB
pqxx::result created, which contains iterators to count run numbers and infos
It writes this inofs into the DB
When finalising, it just updates infos, like NumEvents, RunNumber etc


3. Trigger

private: VME_service_name, num_VME, VME_port
zmq ivector of  sockets: VMESockets

zmq socket Ireceive to exchange messages between..?

___Initialise___
RemoteServices is a vector of *Store. JsonPaser messages are stored
I guess this is for checking VME cards and connecting to them via ZMQ

___Exectue___
Tries to read trg status from VMESockets, then pass info to m_data->triggered

___Finalise___
Clears sockets


4. Network Receive Data

private: zmq sockets Receive, string m_address

___Initialise___
ZMQ connects to 

port 24011
address 192.168.1.21 #10.25.190.95 #10.25.190.15

Gets ready to receive data
Data saved in boost archive: conversion from ASCII to readable objects


5. Card Data Recorder

card_root_thread_args root struct with Outfile, zmq context, TFileTTreeCap, filepart

private: h1 root Thread, Isend zmq socket

___Initialise___
run thread
Save in a TTree file all data from VME cards, filling branches

___Exectue___
Essentially the same as in Initialise, it fills branches
